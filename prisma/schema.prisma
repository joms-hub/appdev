generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  firstName     String?
  lastName      String?
  password      String?
  resetToken    String?
  resetTokenExpiry DateTime?
  Account       Account[]
  Authenticator Authenticator[]
  Session       Session[]
  UserPreferences UserPreferences?
  roadmaps      UserRoadmap[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// User preferences models for onboarding flow
model Track {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  UserPreferences UserPreferences[]
  topics      Topic[] // One track can have many topics
}

model Topic {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String?
  trackId     Int?   // Optional - null means it's a general topic
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  track       Track? @relation(fields: [trackId], references: [id], onDelete: SetNull)
  UserTopicInterests UserTopicInterest[]
}

model UserPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  trackId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  track  Track  @relation(fields: [trackId], references: [id])
  topicInterests UserTopicInterest[]
  confidenceScores ConfidenceScore[]
}

model ConfidenceScore {
  id              String @id @default(cuid())
  preferencesId   String
  questionId      Int    // 1-10 for the 10 confidence questions
  score           Int    // 0-5 Likert scale
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  preferences     UserPreferences @relation(fields: [preferencesId], references: [id], onDelete: Cascade)
  
  @@unique([preferencesId, questionId])
}

model UserTopicInterest {
  id           String @id @default(cuid())
  userId       String
  topicId      Int
  preferencesId String
  createdAt    DateTime @default(now())
  
  topic        Topic           @relation(fields: [topicId], references: [id])
  preferences  UserPreferences @relation(fields: [preferencesId], references: [id], onDelete: Cascade)
  
  @@unique([userId, topicId])
}

// Progress tracking models
model UserRoadmap {
  id          String @id @default(cuid())
  userId      String
  title       String
  description String
  trackName   String
  difficulty  String
  totalDays   Int
  totalActivities Int
  overallProgress Float @default(0) // 0-100 percentage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  phases      RoadmapPhase[]
  
  @@unique([userId]) // One active roadmap per user for now
}

model RoadmapPhase {
  id          String @id @default(cuid())
  roadmapId   String
  phaseIndex  Int
  name        String
  description String
  estimatedDays Int
  progress    Float @default(0) // 0-100 percentage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  roadmap     UserRoadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  activities  ActivityProgress[]
  
  @@unique([roadmapId, phaseIndex])
}

model ActivityProgress {
  id          String @id @default(cuid())
  phaseId     String
  activityIndex Int
  name        String
  description String?
  type        String // project, reading, exercise, quiz
  estimatedHours Int
  completed   Boolean @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  phase       RoadmapPhase @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  
  @@unique([phaseId, activityIndex])
}
